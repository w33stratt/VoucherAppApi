// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VoucherApp.Data;

#nullable disable

namespace VoucherApp.Migrations
{
    [DbContext(typeof(VoucherAppDbContext))]
    partial class VoucherAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VoucherApp.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BrandId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("VoucherApp.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPoints")
                        .HasColumnType("numeric");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("VoucherApp.Models.TransactionVoucher", b =>
                {
                    b.Property<int>("TransactionVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionVoucherId"));

                    b.Property<decimal>("PointsSpent")
                        .HasColumnType("numeric");

                    b.Property<int>("TransactionId")
                        .HasColumnType("integer");

                    b.Property<int>("VoucherId")
                        .HasColumnType("integer");

                    b.HasKey("TransactionVoucherId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("VoucherId");

                    b.ToTable("TransactionVouchers");
                });

            modelBuilder.Entity("VoucherApp.Models.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VoucherId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostInPoints")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VoucherId");

                    b.HasIndex("BrandId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("VoucherApp.Models.TransactionVoucher", b =>
                {
                    b.HasOne("VoucherApp.Models.Transaction", "Transaction")
                        .WithMany("TransactionVouchers")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoucherApp.Models.Voucher", "Voucher")
                        .WithMany("TransactionVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("VoucherApp.Models.Voucher", b =>
                {
                    b.HasOne("VoucherApp.Models.Brand", "Brand")
                        .WithMany("Vouchers")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("VoucherApp.Models.Brand", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("VoucherApp.Models.Transaction", b =>
                {
                    b.Navigation("TransactionVouchers");
                });

            modelBuilder.Entity("VoucherApp.Models.Voucher", b =>
                {
                    b.Navigation("TransactionVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
